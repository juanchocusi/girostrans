(function (e, t) { var n = "_sg_index_"; var r = "_sg_adj_"; e.widget("ui.table_scroll", { version: "1.0.0", options: { rowsInHeader: null, rowsInFooter: null, fixedColumnsLeft: 0, fixedColumnsRight: 0, rowsInScrollableArea: 10, columnsInScrollableArea: 5, overflowY: "auto", overflowX: "auto" }, _create: function () { this._columnsCount = -1; this._currentTouch = null; this._ensureSettings(); this.startFrom = 0; this._setActualCellIndexes(); this._yInitScroll(); this._yUpdateRowsVisibility(); this._xInitScroll(); this._xUpdateColumnsVisibility(); this._yUpdateScrollHeights(); this.widget().on("mousewheel", e.proxy(this._tableMouseWheel, this)); this.widget().on("DOMMouseScroll", e.proxy(this._tableMouseWheel, this)); this.widget().on("touchstart", e.proxy(this._touchStart, this)); this.widget().on("touchmove", e.proxy(this._touchMove, this)); this.widget().on("touchend", e.proxy(this._touchEnd, this)) }, _ensureSettings: function () { if (this.options.rowsInHeader == null) { if (this._table().tHead) this.options.rowsInHeader = this._table().tHead.rows.length; else this.options.rowsInHeader = 1 } if (this.options.rowsInFooter == null) { if (this._table().tFoot) this.options.rowsInFooter = this._table().tFoot.rows.length; else this.options.rowsInFooter = 0 } }, _xGetNumberOfColumns: function () { if (this._columnsCount != -1) return this._columnsCount; this._columnsCount = Math.max.apply(null, e(this._table().rows).map(function () { return this.cells.length }).get()); if (e(".sg-v-scroll-cell", this.widget()).length > 0) this._columnsCount -= 1; return this._columnsCount }, _xNumberOfScrollableColumns: function () { var e = this._xGetNumberOfColumns() - this.options.fixedColumnsLeft - this.options.fixedColumnsRight; if (e < 1) return 1; return e }, _xScrollWidth: function () { var e = this._xGetNumberOfColumns() - this.options.fixedColumnsLeft - this.options.fixedColumnsRight; if (e > this.options.columnsInScrollableArea) return this.options.columnsInScrollableArea; if (e < 1) return 1; return e }, _xScrollNeeded: function () { var e = this._xGetNumberOfColumns() - this.options.fixedColumnsLeft - this.options.fixedColumnsRight; return e > this.options.columnsInScrollableArea }, _xInitScroll: function () { if (this._xGetNumberOfColumns() < this.options.fixedColumnsLeft + this.options.fixedColumnsRight) return; if (this._xScrollNeeded() || this.options.overflowX == "scroll") { var t = this._table().insertRow(this._table().rows.length); if (this.options.fixedColumnsLeft > 0) { var n = e(t.insertCell(0)); n.attr("colspan", this.options.fixedColumnsLeft) } var r = e(t.insertCell(1)); r.attr("colspan", this._xScrollWidth()); r.addClass("sg-x-scroll-cell"); var i = e('<div class="sg-h-scroll-container"></div>'); i.css("overflow-x", "scroll"); i.css("margin-right", "-20000px"); i.width(r.width()); var s = e('<div style="height: 1px;"></div>'); s.width(this._xNumberOfScrollableColumns() / this._xScrollWidth() * r.width()); s.appendTo(i); i.appendTo(r); i.scroll(e.proxy(this._xUpdateColumnsVisibility, this)); if (this.options.fixedColumnsRight > 0) { var n = e(t.insertCell(2)); n.attr("colspan", this.options.fixedColumnsRight + (e(".sg-v-scroll-cell", this.widget()).length > 0 ? 1 : 0)) } } }, _xCurrentRelativeScrollLeft: function () { var t = e(".sg-h-scroll-container", this.widget()); return t.scrollLeft() / t.width() }, _xScrollDelta: function () { var t = e(".sg-h-scroll-container", this.widget()); return e("div", t).width() - t.width() }, _xScrollableColumnsCount: function () { return this._xNumberOfScrollableColumns() - this._xScrollWidth() }, _xColumnScrollStep: function () { if (this._xScrollableColumnsCount() == 0) return 0; return this._xScrollDelta() / this._xScrollableColumnsCount() }, _setColumnVisibility: function (e, t, r, i) { var s = this._table().rows; for (var o = r; o < i; o++) { var u = s[o]; for (var a = 0; a < u.cells.length; a++) { var f = u.cells[a]; var l = f[n]; if (l == e) { if (!f.colSpan || f.colSpan == 1) { if (t && f.style.display == "none") f.style.display = ""; if (!t && f.style.display != "none") f.style.display = "none" } } } } }, _xFirstVisibleColumnWidth: function () { for (var t = this.options.rowsInHeader; t < this._table().rows.length - this.options.rowsInFooter - e(".sg-h-scroll-container", this.widget()).length; t++) { if (e(this._table().rows[t]).css("display") != "none") { for (var n = this.options.fixedColumnsLeft; n < this._xGetNumberOfColumns() - this.options.fixedColumnsRight; n++) { if (e(this._table().rows[t].cells[n]).css("display") != "none") return e(this._table().rows[t].cells[n]).width() } } } return 0 }, _xLastVisibleColumnWidth: function () { for (var t = this.options.rowsInHeader; t < this._table().rows.length - this.options.rowsInFooter - e(".sg-h-scroll-container", this.widget()).length; t++) { if (e(this._table().rows[t]).css("display") != "none") { for (var n = this._xGetNumberOfColumns() - this.options.fixedColumnsRight - 1; n >= this.options.fixedColumnsLeft; n--) { if (e(this._table().rows[t].cells[n]).css("display") != "none") return e(this._table().rows[t].cells[n]).width() } } } return 0 }, _xUpdateColumnsVisibility: function () { if (!this._xScrollNeeded()) return; var t = e(".sg-h-scroll-container", this.widget()); var n = Math.floor(t.scrollLeft() / this._xColumnScrollStep()); var r = this._xCurrentRelativeScrollLeft(); for (var i = this.options.fixedColumnsLeft; i < this._xGetNumberOfColumns() - this.options.fixedColumnsRight; i++) { var s = false; if (i >= this.options.fixedColumnsLeft + n && i < this.options.fixedColumnsLeft + n + this.options.columnsInScrollableArea) { s = true } this._setColumnVisibility(i, s, 0, this._table().rows.length - 1) } this._xUpdateScrollWidths() }, _xUpdateScrollWidths: function () { var t = e(".sg-h-scroll-container", this.widget()); var n = t.closest("td"); t.width(n.width()); var r = e("div", t); r.width(this._xNumberOfScrollableColumns() / this._xScrollWidth() * n.width()) }, _yScrollHeight: function () { var t = this._table().rows.length - this.options.rowsInHeader - this.options.rowsInFooter; if (e(".sg-h-scroll-container", this.widget()).length > 0) t--; if (t > this.options.rowsInScrollableArea) return this.options.rowsInScrollableArea; if (t < 1) return 1; return t }, _yNumberOfScrollableRows: function () { var t = this._table().rows.length - this.options.rowsInHeader - this.options.rowsInFooter; if (e(".sg-h-scroll-container", this.widget()).length > 0) t--; if (t < 1) return 1; return t }, _yScrollNeeded: function () { var t = this._table().rows.length - this.options.rowsInHeader - this.options.rowsInFooter; if (e(".sg-h-scroll-container", this.widget()).length > 0) t--; return t > this.options.rowsInScrollableArea }, _yInitScroll: function () { if (this._table().rows.length < this.options.rowsInHeader + this.options.rowsInFooter) return; if (this._yScrollNeeded() || this.options.overflowY == "scroll") { var t = e(this._table().rows[0].insertCell(this._table().rows[0].cells.length)); t.attr("rowspan", this.options.rowsInHeader); var n = e(this._table().rows[this.options.rowsInHeader + this.startFrom].insertCell(this._table().rows[this.options.rowsInHeader + this.startFrom].cells.length)); n.attr("rowspan", this._yScrollHeight()); n.attr("width", "1px"); n.addClass("sg-v-scroll-cell"); var r = e('<div class="sg-v-scroll-container"></div>'); r.css("overflow-y", "scroll"); r.height(n.height()); var i = e('<div style="width: 1px;"></div>'); i.height(this._yNumberOfScrollableRows() / this._yScrollHeight() * n.height()); i.appendTo(r); r.appendTo(n); this._attachToEndScrolling(r, e.proxy(this._yUpdateRowsVisibility, this)); if (this.options.rowsInFooter != 0) { var s = this._table().rows[this._yNumberOfScrollableRows() + this.options.rowsInHeader]; var o = e(s.insertCell(s.cells.length)); o.attr("rowspan", this.options.rowsInFooter) } } }, _yCurrentRelativeScrollTop: function () { var t = e(".sg-v-scroll-container", this.widget()); return t.scrollTop() / t.height() }, _yMoveScrollToRightRow: function (t) { var n = e(".sg-v-scroll-cell", this.widget()).closest("tr").get(0); var r = this._table().rows[this.options.rowsInHeader + this.startFrom]; var i = e(".sg-v-scroll-container", this.widget()); var s = e("div", i); if (n != r) { var o = e(r.insertCell(r.cells.length)); o.attr("rowspan", this._yScrollHeight()); o.addClass("sg-v-scroll-cell"); o.attr("width", "1px"); var u = e(".sg-v-scroll-container", e(n)); u.height(0); u.appendTo(o); n.deleteCell(n.cells.length - 1); i.height(o.height()); s.height(this._yNumberOfScrollableRows() / this._yScrollHeight() * o.height()); i.scrollTop(t * i.height()); i.get(0) } }, _yScrollDelta: function () { var t = e(".sg-v-scroll-container", this.widget()); return e("div", t).height() - t.height() }, _yScrollableRowsCount: function () { return this._yNumberOfScrollableRows() - this._yScrollHeight() }, _yRowScrollStep: function () { if (this._yScrollableRowsCount() == 0) return 0; return this._yScrollDelta() / this._yScrollableRowsCount() }, _yUpdateScrollHeights: function () { var t = e(".sg-v-scroll-container", this.widget()); var n = t.closest("td"); t.hide(); t.height(n.height()); var r = e("div", t); r.height(this._yNumberOfScrollableRows() / this._yScrollHeight() * n.height()); t.show() }, _yFirstVisibleRowHeight: function () { for (var t = this.options.rowsInHeader; t < this._table().rows.length - this.options.rowsInFooter - e(".sg-h-scroll-container", this.widget()).length; t++) { if (e(this._table().rows[t]).css("display") != "none") { return e(this._table().rows[t]).height() } } return 0 }, _yLastVisibleRowHeight: function () { for (var t = this._table().rows.length - this.options.rowsInFooter - e(".sg-h-scroll-container", this.widget()).length - 1; t >= this.options.rowsInHeader; t--) { if (e(this._table().rows[t]).css("display") != "none") { return e(this._table().rows[t]).height() } } return 0 }, _yUpdateRowsVisibility: function () { if (!this._yScrollNeeded()) return; var t = e(".sg-v-scroll-container", this.widget()); var n = Math.floor(t.scrollTop() / this._yRowScrollStep()); var r = this._yCurrentRelativeScrollTop(); for (var i = this.options.rowsInHeader; i < this._table().rows.length - this.options.rowsInFooter - e(".sg-h-scroll-container", this.widget()).length; i++) { var s = false; if (i >= this.options.rowsInHeader + n && i < this.options.rowsInHeader + n + this.options.rowsInScrollableArea) { s = true } if (s) { e(this._table().rows[i]).show() } else { e(this._table().rows[i]).hide() } } if (this.startFrom != n) { this.startFrom = n; this._yMoveScrollToRightRow(r) } }, _attachToEndScrolling: function (t, n) { t.scroll(function () { clearTimeout(t.data("scrollTimer")); e.data(this, "scrollTimer", setTimeout(function () { n.apply(this) }, 300)) }) }, _tableMouseWheel: function (t) { var n = false; var r = false; var i = t.originalEvent; if (i.wheelDelta) { if (i.wheelDelta >= 120) { n = true } else { if (i.wheelDelta <= -120) { r = true } } } if (i.detail) { if (i.detail == -3) n = true; else if (i.detail == 3) r = true } var s = e(".sg-v-scroll-container", this.widget()); var o = 0; if (n) o = this._yRowScrollStep() + 1; if (r) o = -this._yRowScrollStep() - 1; if (o != 0) { s.scrollTop(s.scrollTop() - o) } t.preventDefault() }, _touchStart: function (e) { if (e.originalEvent.touches && e.originalEvent.touches.length == 1) { var t = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0]; this._currentTouch = { X: t.pageX, Y: t.pageY }; e.preventDefault(); e.stopPropagation() } }, _touchMove: function (t) { if (t.originalEvent.touches && t.originalEvent.touches.length == 1 && this._currentTouch != null) { var n = t.originalEvent.touches[0] || t.originalEvent.changedTouches[0]; var r = { X: n.pageX, Y: n.pageY }; var i = this._currentTouch.X - r.X; var s = this._currentTouch.Y - r.Y; var o = e(".sg-v-scroll-container", this.widget()); if (s > 0) { var u = this._yFirstVisibleRowHeight(); if (u != 0 && s > u) { o.scrollTop(o.scrollTop() + (this._yRowScrollStep() + 1)); this._currentTouch.Y -= u; this._yUpdateRowsVisibility() } } else { var u = this._yLastVisibleRowHeight(); if (u != 0 && s < -1 * u) { o.scrollTop(o.scrollTop() - (this._yRowScrollStep() + 1)); this._currentTouch.Y += u; this._yUpdateRowsVisibility() } } var a = e(".sg-h-scroll-container", this.widget()); if (i > 0) { var f = this._xFirstVisibleColumnWidth(); if (f != 0 && i > f) { a.scrollLeft(a.scrollLeft() + (this._xColumnScrollStep() + 1)); this._currentTouch.X -= u } } else { var f = this._xLastVisibleColumnWidth(); if (f != 0 && i < -1 * f) { a.scrollLeft(a.scrollLeft() - (this._xColumnScrollStep() + 1)); this._currentTouch.X += f } } t.preventDefault(); t.stopPropagation() } }, _touchEnd: function (e) { this._currentTouch = null }, _table: function () { return this.widget().get(0) }, _setActualCellIndexes: function () { var t = this._table().rows; for (var i = 0; i < t.length; i++) { var s = t[i]; var o = e(s).get(0)[r]; if (!o) o = []; for (var u = 0; u < s.cells.length; u++) { var a = u - 1; if (u > 0) { var f = e(s.cells[u - 1]); a = f.get(0)[n]; if (f.attr("colspan")) { a += this._getColSpan(f) - 1 } } var l = e(s.cells[u]); var c = a + 1; for (var h = 0; h < o.length; h++) { if (o[h].index <= c) { c += o[h].adjustment; o[h].adjustment = 0 } } l.get(0)[n] = c; if (l.attr("rowspan") > 1) { var p = l.attr("rowspan"); for (var d = i + 1; d < i + p && d < t.length; d++) { var v = e(t[d]); var m = v.get(0)[r]; if (!m) m = []; m.push({ index: c, adjustment: this._getColSpan(l) }); v.get(0)[r] = m } } } } }, _getColSpan: function (e) { if (e.data("scroll-span")) return e.data("scroll-span"); if (e.attr("colspan")) return e.attr("colspan") * 1; return 1 } }) })(jQuery)